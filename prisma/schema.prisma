// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  emailVerified DateTime?
  passwordHash  String
  role          Role     @default(USER)

  name          String?

  //accounts      Account[]
  //sessions      Session[]

  addresses     Address[]
  orders        Order[]
  subscriptions Subscription[]
  newsletterSubscribers NewsletterSubscriber?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  street     String
  city       String
  postalCode String
  country    String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])

  orders Order[]

  @@map("addresses")
}

model Box {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  price       Float

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  subscriptions Subscription[]
  orders Order[]

  @@map("boxes")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  boxId     Int
  isActive  Boolean  @default(true)
  startDate DateTime @default(now())
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  box       Box      @relation(fields: [boxId], references: [id])

  @@map("subscriptions")
}

model Order {
  id         Int       @id @default(autoincrement())
  userId     Int
  boxId      Int
  addressId  Int
  status     OrderStatus @default(PENDING)
  price      Float
  orderedAt  DateTime  @default(now())

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  box        Box       @relation(fields: [boxId], references: [id])
  address    Address   @relation(fields: [addressId], references: [id])

  @@map("orders")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}


model NewsletterSubscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  userId    Int?     @unique// Peut être null si c’est un visiteur

  subscribedAt DateTime @default(now())
  updatedAt  DateTime  @updatedAt

  user      User?    @relation(fields: [userId], references: [id])

  @@map("newsletter_subscribers")
}







